"""Create a baseline migrations

Revision ID: 682c9e0b10af
Revises:
Create Date: 2023-11-29 11:38:34.016405

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '682c9e0b10af'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

from sqlalchemy.engine.reflection import Inspector




def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    tables = inspector.get_table_names()
    if 'cvs' in tables:
        op.drop_table('cvs')
    op.create_table('cvs',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('firstname', sa.String(), nullable=False),
        sa.Column('lastname', sa.String(), nullable=False),
        sa.Column('poste', sa.String(), nullable=False),
        sa.Column('introduction', sa.String(), nullable=True),
        sa.Column('missions', sa.ARRAY(postgresql.JSONB(astext_type=sa.Text())), nullable=True),
        sa.Column('languages', sa.ARRAY(postgresql.JSONB(astext_type=sa.Text())), nullable=True),
        sa.Column('educations', sa.ARRAY(postgresql.JSONB(astext_type=sa.Text())), nullable=True),
        sa.Column('certifications', sa.ARRAY(postgresql.JSONB(astext_type=sa.Text())), nullable=True),
        sa.Column('skills', sa.ARRAY(postgresql.JSONB(astext_type=sa.Text())), nullable=True),
        sa.Column('id_user', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    if 'templates' in tables:
        op.drop_table('templates')
    op.create_table('templates',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('type', sa.String(), nullable=False),
        sa.Column('fileName', sa.String(), nullable=False),
        sa.Column('fileBlob', sa.LargeBinary(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    if 'reviewers' in tables:
        op.drop_table('reviewers')
    op.create_table('reviewers',
        sa.Column('id_users', sa.String(), nullable=False),
        sa.Column('id_reviewer', sa.String(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id_users')
    )
    
    if 'users' not in tables:
        op.create_table('users',
            sa.Column('id_users', sa.String(), nullable=False),
            sa.Column('firstname', sa.String(), nullable=False),
            sa.Column('lastname', sa.String(), nullable=False),
            sa.Column('id_manager', sa.String(), nullable=True),
            sa.Column('firstname_manager', sa.String(), nullable=True),
            sa.Column('lastname_manager', sa.String(), nullable=True),
            sa.PrimaryKeyConstraint('id_users')
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('templates')
    op.drop_table('cvs')
    op.drop_table('reviewers')

    # ### end Alembic commands ###
